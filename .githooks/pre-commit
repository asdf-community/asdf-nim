#!/usr/bin/env bash

set -ueo pipefail

while read path; do
  echo "# $path"
  if [ -n "$(git diff --name-only | grep -F "$path")" ]; then
    # path has unstaged changes, so don't modify it
    echo "↳ unstaged changes, skipping"
    echo
    continue
  fi
  case "$path" in
    *.md | *.yml)
      (
        npx prettier -u -w "$path" 2>&1 1>/dev/null
      ) && (
        echo "↳ prettier     ok"
      ) || (
        echo "↳ prettier     wrote"
      )
      ;;
    *.bats)
      (
        shfmt -d -i 2 -ci -ln bats -w "$path" >/dev/null
      ) && (
        echo "↳ shfmt        ok"
      ) || (
        echo "↳ shfmt        wrote"
        git add "$path"
      )
      ;;
    *.sh | *.bash | bin/* | .githooks/* | shims/*)
      (
        shfmt -d -i 2 -ci -ln bash -w "$path" >/dev/null
      ) && (
        echo "↳ shfmt        ok"
      ) || (
        git add "$path"
        echo "↳ shfmt        wrote"
      )
      patchfile="$(mktemp)"
      (
        shellcheck \
          --format=diff \
          --external-sources \
          --shell=bash \
          --severity=style \
          --exclude=SC2164 \
          "$path" \
          2>/dev/null >"$patchfile"
        if [ -n "$(cat "$patchfile")" ]; then
          git apply "$patchfile" >/dev/null
          git add "$path"
          echo "↳ shellcheck   wrote"
        else
          echo "↳ shellcheck   ok"
        fi
      ) || (
        echo "↳ shellcheck couldn't apply patch"
        cat "$patchfile"
      )
      rm "$patchfile"
      ;;
    *)
      echo "↳ no linter"
      ;;
  esac
  echo
done <<<"$(git diff --name-only --staged)"
