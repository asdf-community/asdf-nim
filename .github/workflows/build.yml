name: Build
on:
  pull_request:
    paths-ignore:
      - README.md
      - .github/workflows/build-latest-nightly.yml
  push:
    paths-ignore:
      - README.md
      - .github/workflows/build-latest-nightly.yml

jobs:
  test_x86:
    name: Test / Nim ${{ matrix.nim-version }} / ${{ matrix.os }} / x86_64
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test installation of official Linux binaries from nim-lang.org
          - os: ubuntu-latest
            nim-version: 1.4.2
          - os: ubuntu-latest
            nim-version: 1.2.8
          - os: ubuntu-latest
            nim-version: 1.0.10
          - os: ubuntu-latest
            nim-version: 0.20.2

          # Test building from git checkout
          - os: ubuntu-latest
            nim-version: ref:HEAD

          # 2020-01-01 - macOS builds across repos on Github Actions are timing out, so disabling for now
          ## Test installation of unoffical macOS binaries from elijahr/nim-builds
          # - os: macos-latest
          #   nim-version: 1.4.2

    runs-on: ${{ matrix.os }}
    steps:
      - name: Test nimble ${{ matrix.nim-version }}
        uses: asdf-vm/actions/plugin-test@v1
        with:
          command: nim -v
          version: ${{ matrix.nim-version }}

  test_non_x86:
    name: Test / Nim ${{ matrix.nim-version }} / debian-buster / ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test on non-x86 Linux using run-on-arch-action
          - runs-on: ubuntu-latest
            nim-version: 1.4.2
            arch: armv7
          - runs-on: ubuntu-latest
            nim-version: 1.2.8
            arch: aarch64
          - runs-on: ubuntu-latest
            nim-version: 1.0.10
            arch: ppc64le

    runs-on: ubuntu-latest
    steps:
      # Optimization: re-use cached Nim->C compilation
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: cache-${{ matrix.arch }}-${{ matrix.nim-version }}

      - name: Checkout Nim project
        uses: actions/checkout@v2

      # Install & run tests on non-x86
      - uses: uraimo/run-on-arch-action@v2.0.8
        name: Install Nim & run tests
        with:
          arch: ${{ matrix.arch }}
          distro: buster

          dockerRunArgs: |
            --volume "${HOME}/.cache:/root/.cache"

          setup: mkdir -p "${HOME}/.cache"

          shell: /usr/bin/env bash

          install: |
            apt-get update -q -y
            apt-get -qq install -y build-essential curl git hub xz-utils
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf

          env: |
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          run: |
            . $HOME/.asdf/asdf.sh
            asdf plugin test nim . --asdf-tool-version ${{ matrix.nim-version }}

  # TODO - replace below with Bats tests
  assert_nimble_configuration:
    name: assert that nimble is configured correctly
    runs-on: ubuntu-latest
    steps:
      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
      - name: Checkout repo
        uses: actions/checkout@v2
      - name:
        shell: bash
        run: |
          set -uex

          asdf plugin add nim .
          asdf install nim 1.4.2
          asdf local nim 1.4.2

          ASDF_INSTALL_PATH="${HOME}/.asdf/installs/nim/1.4.2"

          # Assert package index is placed in the correct location
          nimble refresh -y
          test -f "${ASDF_INSTALL_PATH}/nimble/packages_official.json"

          # Assert package installs to correct location
          nimble install -y nimjson@1.2.8
          test -x "${ASDF_INSTALL_PATH}/nimble/bin/nimjson"
          test -f "${ASDF_INSTALL_PATH}/nimble/pkgs/nimjson-1.2.8/nimjson.nimble"

          # Assert that shim was created for package binary
          test "$(which nimjson)" != ""

          # Assert that nim finds nimble packages
          echo "import nimjson" >testnimble.nim
          nim c -r testnimble.nim

  assert_multiple_nims:
    name: assert that multiple nims can be installed side-by-side
    runs-on: ubuntu-latest
    steps:
      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install binary Nim 1.4.2
        run: |
          asdf plugin add nim .
          asdf install nim 1.4.2
      - name: Build Nim HEAD
        run: |
          # Building from source will bootstrap with the existing nim
          asdf install nim ref:HEAD
