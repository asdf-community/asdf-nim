#!/usr/bin/env bash

set -ueo pipefail

regenerate() {
  # After a nimble operation, regenerate nim shims to find new package binaries
  if "$(command -v asdf)" reshim nim; then
    echo "  asdf-nim: regenerated shims"
  else
    echo "  asdf-nim: failed to regenerate shims"
  fi
  echo
}

trap 'trap - HUP; SIGNAL=SIGHUP; regenerate; kill -HUP $$' HUP
trap 'trap - INT; SIGNAL=SIGINT; regenerate; kill -INT $$' INT
trap 'trap - TERM; SIGNAL=SIGTERM; regenerate; kill -TERM $$' TERM

exit_code=0

# Workaround for bug in asdf where ASDF_INSTALL_VERSION is empty for custom shims
if [ -z "${ASDF_INSTALL_VERSION:-}" ]; then
  export ASDF_INSTALL_PATH
  ASDF_INSTALL_PATH="$(dirname "$(dirname "$(asdf which nim)")")"
  export ASDF_INSTALL_VERSION
  ASDF_INSTALL_VERSION="$(basename $ASDF_INSTALL_PATH)"
fi

# Tell Nim where to find nimble package metadata and packages.
# If a user has a custom NIMBLE_DIR, use that.
# Otherwise if the current working directory has a nimbledeps directory, use that.
# Otherwise, use the nimble directory within ASDF_INSTALL_PATH.
# see https://github.com/nim-lang/nimble#nimbles-folder-structure-and-packages
if [ -z "${NIMBLE_DIR:-}" ] &&
  [ ! -d "${PWD}/nimbledeps" ]; then
  export NIMBLE_DIR
  NIMBLE_DIR="${ASDF_INSTALL_PATH}/nimble"
fi

# nimble parallel to nim binary
nimble="$(dirname "$(asdf which nim)")/nimble"
$nimble "$@" || exit_code=$?
if [ $exit_code -eq 0 ]; then
  if [ -z "${SIGNAL:-}" ]; then
    case "${1-}" in
      install | develop | uninstall)
        regenerate
        ;;
    esac
  fi
fi
exit $exit_code
