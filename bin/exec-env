#!/usr/bin/env bash

# Workaround so Nim knows where to find Homebrew-installed dynamic libraries
# on M1 Macs. On M1, Homebrew lives in /opt/homebrew instead of /usr/local.
# So end users have to put something like DYLD_LIBRARY_PATH=/opt/homebrew/lib
# in their shell init files. However, macOS has a security feature called SIP
# which prevents certain env vars such as DYLD_LIBRARY_PATH from propagating
# to /usr/bin/env child processes. So, we assume that if the user is on M1 macOS
# and has Homebrew installed, they want to link to libraries there. To skip this
# set ASDF_NIM_MACOS_M1_HOMEBREW_WORKAROUND=no in your environment.
if [ "${ASDF_NIM_MACOS_M1_HOMEBREW_WORKAROUND:-yes}" = "yes" ] &&
  [ "$(uname)" = "Darwin" ] &&
  [ "$(uname -m)" = "arm64" ] &&
  [ "${DYLD_LIBRARY_PATH-}" = "" ] &&
  [ -d /opt/homebrew/lib ]; then
  export DYLD_LIBRARY_PATH
  DYLD_LIBRARY_PATH=/opt/homebrew/lib
fi

# Workaround for bug in asdf where ASDF_INSTALL_VERSION is empty when exec-env is invoked for custom shims
if [ -z "${ASDF_INSTALL_VERSION:-}" ]; then
  export ASDF_INSTALL_PATH
  ASDF_INSTALL_PATH="$(dirname "$(dirname "$(asdf which nim)")")"
  export ASDF_INSTALL_VERSION
  ASDF_INSTALL_VERSION="$(basename $ASDF_INSTALL_PATH)"
fi

# Override PATH so this nim is found first
export PATH
PATH="${ASDF_INSTALL_PATH}/bin:${PATH}"

# Tell Nim where to find nimble package metadata and packages.
# If a user has a custom NIMBLE_DIR, use that.
# Otherwise if the current working directory has a nimbledeps directory, use that.
# Otherwise, use the nimble directory within ASDF_INSTALL_PATH.
# see https://github.com/nim-lang/nimble#nimbles-folder-structure-and-packages
if [ -z "${NIMBLE_DIR:-}" ] &&
  [ ! -d "${PWD}/nimbledeps" ]; then
  export NIMBLE_DIR
  NIMBLE_DIR="${ASDF_INSTALL_PATH}/nimble"
fi
